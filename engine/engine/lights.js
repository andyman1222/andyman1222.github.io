class ambientLight extends primitive{
    color;
    lightmask;
    id;
    type = 1
    handleNegative
    enabled = true
    static NOCHANGE = 0
    static CLAMP = 1
    static CLAMPNEGATIVE = 2
    static ABS = 3
    /**
     * 
     * @param {*} b brightness/color of light
     * @param {*} m bitwise mask indicating how many channels the light casts onto (up to 256)
     * @param {*} n how to handle negative values generated by this light source. Valid responses are "noChange", "clamp" (min light 0), "clampNegative" (max light 0), "abs". If other or null, default to "noChange"
     */
    constructor(c, m, n=ambientLight.CLAMP, e = true){
        super({pos: vec3(0,0,0), rot: Quaternion(0,1,0,0), scl: vec3(1,1,1)})
        this.handleNegative = n
        this.color = c
        this.lightmask = m
        var i = 0;
        for(i = 0; lights[i] != null; i++){}
        this.id = i
        this.enabled = e
        lights[this.id] = this
        
    }

    destroyLight(){
        lights[this.id] = null;
        delete this;
    }
}

/**
 * dummy class for convienence
 */
class light extends ambientLight{
    constructor(c, m, n=ambientLight.NOCHANGE, e = true){
        super(c, m, n, e)
    }
}

class directionalLight extends ambientLight{

    /**
     * 
     * @param {*} t transform of light (directional only accounts rotation)
     * @param {*} c color of light
     * @param {*} m bitwise mask indicating how many channels the light casts onto (up to 256)
     */
    constructor(t, c, m, n=light.CLAMP, e = true){
        super(c, m, n, e)
        this.transform = t
        this.color = c
        this.lightmask = m
        this.type = 2
    }


}

class pointLight extends ambientLight{
    attenuation;
    diffuseMultiply = vec4(1,1,1,1)
    specularMultiply = vec4(1,1,1,1)
    shininess = 1
    /**
     * 
     * @param {*} t transform of light (scale not accounted)
     * @param {*} b brightness/color of light
     * @param {*} m bitwise mask indicating how many channels the light casts onto (up to 256)
     * @param {*} a linear attenuation of light
     */
    constructor(t, c, m, a, s = 1, n=light.CLAMP, e = true){
        super(c, m, n, e)
        this.transform = t
        this.attenuation = a
        this.type = 3
        this.shininess = s
    }
}

class spotLight extends pointLight{
    angle;
    /**
     * 
     * @param {*} t transform of light (scale not accounted)
     * @param {*} b brightness/color of light
     * @param {*} m bitwise mask indicating how many channels the light casts onto (up to 256)
     * @param {*} a linear attenuation of light. If zero, has infinite attenuation
     * @param {*} h angle of spread of the spotlight
     */
    constructor(t, c, m, a, s = 1, h = 90, n=light.CLAMP, e = true){
        super(t, c, m, a, s, n, e)
        this.angle = h
        this.type = 4
    }
}